// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function string_of_grade(param) {
  if (param !== undefined) {
    if (param) {
      return "No pass";
    } else {
      return "Pass";
    }
  } else {
    return "Not graded";
  }
}

function make(name) {
  return {
          name: name,
          tests: /* [] */0,
          course_grade: undefined
        };
}

function to_string(s) {
  return Curry._3(Printf.sprintf(/* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "Student: ",
                    _1: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: {
                        TAG: /* String_literal */11,
                        _0: "; number of tests made: ",
                        _1: {
                          TAG: /* Int */4,
                          _0: /* Int_d */0,
                          _1: /* No_padding */0,
                          _2: /* No_precision */0,
                          _3: {
                            TAG: /* String_literal */11,
                            _0: "; course grade: ",
                            _1: {
                              TAG: /* String */2,
                              _0: /* No_padding */0,
                              _1: /* End_of_format */0
                            }
                          }
                        }
                      }
                    }
                  },
                  _1: "Student: %s; number of tests made: %d; course grade: %s"
                }), s.name, List.length(s.tests), string_of_grade(s.course_grade));
}

var Student = {
  make: make,
  to_string: to_string
};

function compute_course_grade(s) {
  var tests = s.tests;
  if (List.length(tests) <= 0) {
    return s;
  }
  var total = List.fold_left((function (prim, prim$1) {
          return prim + prim$1 | 0;
        }), 0, tests);
  var q = Caml_int32.div(total, List.length(tests));
  var grade = q >= 80 ? /* Pass */0 : /* No_pass */1;
  return {
          name: s.name,
          tests: s.tests,
          course_grade: grade
        };
}

var GraduateStudent = {
  make: make,
  to_string: to_string,
  compute_course_grade: compute_course_grade
};

function compute_course_grade$1(s) {
  var tests = s.tests;
  if (List.length(tests) <= 0) {
    return s;
  }
  var total = List.fold_left((function (prim, prim$1) {
          return prim + prim$1 | 0;
        }), 0, tests);
  var q = Caml_int32.div(total, List.length(tests));
  var grade = q >= 70 ? /* Pass */0 : /* No_pass */1;
  return {
          name: s.name,
          tests: s.tests,
          course_grade: grade
        };
}

var UndergraduateStudent = {
  make: make,
  to_string: to_string,
  compute_course_grade: compute_course_grade$1
};

function make$1(name) {
  return {
          name: name,
          tests: /* [] */0,
          course_grade: undefined
        };
}

function to_string$1(s) {
  return Curry._2(Printf.sprintf(/* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "Name: ",
                    _1: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: {
                        TAG: /* String_literal */11,
                        _0: ", grade: ",
                        _1: {
                          TAG: /* String */2,
                          _0: /* No_padding */0,
                          _1: /* End_of_format */0
                        }
                      }
                    }
                  },
                  _1: "Name: %s, grade: %s"
                }), s.name, string_of_grade(s.course_grade));
}

var SecretStudent = {
  make: make$1,
  to_string: to_string$1
};

function compute_course_grade$2(s) {
  var tests = s.tests;
  if (List.length(tests) <= 0) {
    return s;
  }
  var tests$1 = s.tests;
  var total = List.fold_left((function (prim, prim$1) {
          return prim + prim$1 | 0;
        }), 0, tests$1);
  var q = Caml_int32.div(total, List.length(tests$1));
  var grade = q >= 80 ? /* Pass */0 : /* No_pass */1;
  return {
          name: s.name,
          tests: s.tests,
          course_grade: grade
        };
}

var PrivateGradStudent = {
  make: make,
  to_string: to_string,
  compute_course_grade: compute_course_grade$2
};

function compute_course_grade$3(s) {
  var tests = s.tests;
  if (List.length(tests) <= 0) {
    return s;
  }
  var total = List.fold_left((function (prim, prim$1) {
          return prim + prim$1 | 0;
        }), 0, tests);
  var q = Caml_int32.div(total, List.length(tests));
  var grade = q >= 70 ? /* Pass */0 : /* No_pass */1;
  return {
          name: s.name,
          tests: s.tests,
          course_grade: grade
        };
}

var PrivateUndergradStudent = {
  make: make,
  to_string: to_string,
  compute_course_grade: compute_course_grade$3
};

var s1 = {
  name: "Foo",
  tests: /* [] */0,
  course_grade: undefined
};

var s2 = {
  name: "Bar",
  tests: /* [] */0,
  course_grade: undefined
};

var l_0 = {
  TAG: /* Grad */0,
  _0: s1
};

var l_1 = {
  hd: {
    TAG: /* Undergrad */1,
    _0: s2
  },
  tl: /* [] */0
};

var l = {
  hd: l_0,
  tl: l_1
};

function print_list(l) {
  return List.iter((function (s) {
                console.log(s);
                
              }), l);
}

var sl = List.map((function (s) {
        return to_string(s._0);
      }), l);

print_list(sl);

var l_1$1 = {
  hd: s2,
  tl: /* [] */0
};

var l$1 = {
  hd: s1,
  tl: l_1$1
};

var sl$1 = List.map(to_string, l$1);

print_list(sl$1);

function Square(N) {
  var area = function (t) {
    return Curry._2(N.times, t.width, t.height);
  };
  return {
          area: area
        };
}

function area(t) {
  return Math.imul(t.width, t.height);
}

var IntSquare = {
  area: area
};

function times(i, j) {
  return i * j;
}

var Float = {
  times: times
};

function area$1(t) {
  return t.width * t.height;
}

var FloatSquare = {
  area: area$1
};

var square = {
  width: 10,
  height: 5.5
};

area$1(square);

function StudentFunctor(G) {
  var make = function (name) {
    return {
            name: name,
            tests: /* [] */0,
            course_grade: undefined
          };
  };
  var to_string = function (s) {
    return Curry._2(Printf.sprintf(/* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "Name: ",
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: {
                          TAG: /* String_literal */11,
                          _0: "; grade: ",
                          _1: {
                            TAG: /* String */2,
                            _0: /* No_padding */0,
                            _1: /* End_of_format */0
                          }
                        }
                      }
                    },
                    _1: "Name: %s; grade: %s"
                  }), s.name, string_of_grade(s.course_grade));
  };
  var compute_course_grade = function (s) {
    return {
            name: s.name,
            tests: s.tests,
            course_grade: Curry._1(G.compute_course_grade, s.tests)
          };
  };
  return {
          make: make,
          to_string: to_string,
          compute_course_grade: compute_course_grade
        };
}

function compute_aux(limit, tests) {
  if (List.length(tests) <= 0) {
    return ;
  }
  var total = List.fold_left((function (prim, prim$1) {
          return prim + prim$1 | 0;
        }), 0, tests);
  var q = Caml_int32.div(total, List.length(tests));
  return q >= limit ? /* Pass */0 : /* No_pass */1;
}

function make$2(name) {
  return {
          name: name,
          tests: /* [] */0,
          course_grade: undefined
        };
}

function to_string$2(s) {
  return Curry._2(Printf.sprintf(/* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "Name: ",
                    _1: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: {
                        TAG: /* String_literal */11,
                        _0: "; grade: ",
                        _1: {
                          TAG: /* String */2,
                          _0: /* No_padding */0,
                          _1: /* End_of_format */0
                        }
                      }
                    }
                  },
                  _1: "Name: %s; grade: %s"
                }), s.name, string_of_grade(s.course_grade));
}

function compute_course_grade$4(s) {
  return {
          name: s.name,
          tests: s.tests,
          course_grade: compute_aux(80, s.tests)
        };
}

var GradStudent = {
  make: make$2,
  to_string: to_string$2,
  compute_course_grade: compute_course_grade$4
};

function make$3(name) {
  return {
          name: name,
          tests: /* [] */0,
          course_grade: undefined
        };
}

function to_string$3(s) {
  return Curry._2(Printf.sprintf(/* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "Name: ",
                    _1: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: {
                        TAG: /* String_literal */11,
                        _0: "; grade: ",
                        _1: {
                          TAG: /* String */2,
                          _0: /* No_padding */0,
                          _1: /* End_of_format */0
                        }
                      }
                    }
                  },
                  _1: "Name: %s; grade: %s"
                }), s.name, string_of_grade(s.course_grade));
}

function compute_course_grade$5(s) {
  return {
          name: s.name,
          tests: s.tests,
          course_grade: compute_aux(70, s.tests)
        };
}

var UndergradStudent = {
  make: make$3,
  to_string: to_string$3,
  compute_course_grade: compute_course_grade$5
};

var s = {
  name: "Foo",
  tests: /* [] */0,
  course_grade: undefined
};

var t = {
  name: "Bar",
  tests: /* [] */0,
  course_grade: undefined
};

var s1$prime = s1;

var s2$prime = s2;

exports.string_of_grade = string_of_grade;
exports.Student = Student;
exports.GraduateStudent = GraduateStudent;
exports.UndergraduateStudent = UndergraduateStudent;
exports.SecretStudent = SecretStudent;
exports.PrivateGradStudent = PrivateGradStudent;
exports.PrivateUndergradStudent = PrivateUndergradStudent;
exports.s1 = s1;
exports.s2 = s2;
exports.print_list = print_list;
exports.s1$prime = s1$prime;
exports.s2$prime = s2$prime;
exports.l = l$1;
exports.sl = sl$1;
exports.Square = Square;
exports.IntSquare = IntSquare;
exports.Float = Float;
exports.FloatSquare = FloatSquare;
exports.square = square;
exports.StudentFunctor = StudentFunctor;
exports.compute_aux = compute_aux;
exports.GradStudent = GradStudent;
exports.UndergradStudent = UndergradStudent;
exports.s = s;
exports.t = t;
/* sl Not a pure module */
