// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

console.log("Hello, BuckleScript");

function compute_aux(limit, s) {
  var tests = s.tests;
  var total = List.fold_left((function (prim, prim$1) {
          return prim + prim$1 | 0;
        }), 0, tests);
  var q = Caml_int32.div(total, List.length(tests));
  if (q >= limit) {
    return /* Pass */0;
  } else {
    return /* No_pass */1;
  }
}

function graded_compute(param) {
  return compute_aux(80, param);
}

function undergraded_compute(param) {
  return compute_aux(70, param);
}

var student1_tests = {
  hd: 78,
  tl: {
    hd: 70,
    tl: {
      hd: 92,
      tl: /* [] */0
    }
  }
};

var student1 = {
  name: "Foo Barsson",
  tests: student1_tests,
  grade: undefined,
  compute_grade: graded_compute
};

var student2_tests = {
  hd: 65,
  tl: {
    hd: 32,
    tl: /* [] */0
  }
};

var student2 = {
  name: "Ronald Tolkien",
  tests: student2_tests,
  grade: undefined,
  compute_grade: undergraded_compute
};

var roster_1 = {
  hd: student2,
  tl: /* [] */0
};

var roster = {
  hd: student1,
  tl: roster_1
};

var graded_roster = List.map((function (s) {
        return {
                name: s.name,
                tests: s.tests,
                grade: Curry._1(s.compute_grade, s),
                compute_grade: s.compute_grade
              };
      }), roster);

exports.compute_aux = compute_aux;
exports.graded_compute = graded_compute;
exports.undergraded_compute = undergraded_compute;
exports.student1 = student1;
exports.student2 = student2;
exports.roster = roster;
exports.graded_roster = graded_roster;
/*  Not a pure module */
